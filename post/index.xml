<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Cocloa is looking at the Piano</title>
    <link>https://onlythepiano.github.io/post/</link>
    <description>Recent content in Posts on Cocloa is looking at the Piano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2019 13:25:00 +0800</lastBuildDate>
    
	<atom:link href="https://onlythepiano.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>新建Blog</title>
      <link>https://onlythepiano.github.io/post/%E6%96%B0%E5%BB%BAblog/</link>
      <pubDate>Thu, 05 Dec 2019 13:25:00 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/%E6%96%B0%E5%BB%BAblog/</guid>
      <description>新建一个没有的Blog.md是可以很顺利的push到远端的，因为这个文件：远端和本地没有冲突。
命令： git add . git commit -m &amp;#34;add a test for only push one blog&amp;#34; git push -u origin master 远端效果： 现在在本地修改这个文件 修改内容为现在显示的内容
命令： hugo --theme=&amp;#34;inkblotty&amp;#34; --baseUrl=&amp;#34;https://onlythepiano.github.io/&amp;#34; --buildDrafts # git add . # git commit -m &amp;#34;update this.新建Blog&amp;#34; # 也没有冲突？ 远端效果： 再一次修改新建Blog 修改内容也为从这开始往上的内容，上一次是从空白到一部分，这次是从一部分到更多修改。</description>
    </item>
    
    <item>
      <title>Hugo post文件夹</title>
      <link>https://onlythepiano.github.io/post/hugo_post%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Thu, 05 Dec 2019 13:16:26 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/hugo_post%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>hugo new post/ .md MarkDown文件必须要放在hugo new 生成的post文件夹里，其他文件夹或者其他命令新建文件夹都是不行的。</description>
    </item>
    
    <item>
      <title>Git分支</title>
      <link>https://onlythepiano.github.io/post/git%E5%88%86%E6%94%AF/</link>
      <pubDate>Thu, 05 Dec 2019 11:34:24 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/git%E5%88%86%E6%94%AF/</guid>
      <description>github上有分支master、dev： 在本地：
 git checkout -b dev 新建并且切换到本地dev分支 git pull origin dev 本地分支和远端分支dev相关联 或 git branch -u origin/dev 本地分支和远端分支dev相关联  github上没有dev分支：   git push origin :  git push origin dev:dev #或 git push origin dev #相当于默认建立与本地同名   </description>
    </item>
    
    <item>
      <title>Hugo学习</title>
      <link>https://onlythepiano.github.io/post/hugo%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 04 Dec 2019 13:24:21 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/hugo%E5%AD%A6%E4%B9%A0/</guid>
      <description>Part-1:Hugo Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。Hugo与hexo类似，只需要记住几个简单的命令，即可生成静态博客。
下面就开始简单介绍一下这款静态博客系统
先介绍常用参数  --bind=&amp;quot;127.0.0.1&amp;quot; 服务监听IP地址； -p, --port=1313 服务监听端口； -w, --watch[=true] 监听站点目录，发现文件变更自动编译； -D, --buildDrafts 包括被标记为draft的文章； -E, --buildExpired 包括已过期的文章； -F, --buildFuture 包括将在未来发布的文章； -b, --baseURL=&amp;quot;www.datals.com&amp;quot; 服务监听域名； --log[=false]: 开启日志； --logFile=&amp;quot;/var/log/hugo.log&amp;quot;: log输出路径； -t, --theme=&amp;quot;&amp;quot; 指定主题； -v, --verbose[=false]: 输出详细信息 下载Hugo GitHub下载
添加环境变量 解压文件，复制hugo.exe路径，添加到环境变量Path；
创建站点 1）在命令行中执行如下命令： hugo new site /path/to/site 2）执行完会在你填写的路径下创建一个站点目录，执行命令进入站点目录： cd /path/to/site 站点目录结构如下
 ▸ archetypes/ #包括内容类型，在创建新内容时自动生成内容的配置 ▸ content/ # 网站内容，全部使用markdown格式 ▸ layouts/ # 网站模板文件，决定内容如何呈现 ▸ static/ # 图片、css、js 等静态资源 ▸ themes/ # 存放主题 config.</description>
    </item>
    
    <item>
      <title>MVC框架</title>
      <link>https://onlythepiano.github.io/post/mvc%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 04 Dec 2019 10:57:47 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/mvc%E6%A1%86%E6%9E%B6/</guid>
      <description>MVC 框架 Model View Controller：模型(model)－视图(view)－控制器(controller)
 Model（模型）：  是应用程序中用于处理应用程序数据逻辑的部分。 通常模型对象负责在数据库中存取数据。  View（视图）：  是应用程序中处理数据显示的部分。 通常视图是依据模型数据创建的。  　Controller（控制器）：  是应用程序中处理用户交互的部分。 通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。   优点 耦合性低： 对于视图层而言（view）：  视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。  对于模型层而言（modle）：  因为模型 与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。  ​	模型是自包含的，并且与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。如果把数据库从MySQL移植到Oracle，或者改变基于RDBMS数据源到LDAP，只需改变模型即可。一旦正确的实现了模型，不管数据来自数据库或是LDAP服务器，视图将会正确的显示它们。由于运用MVC的应用程序的三个部件是相互独立，改变其中一个不会影响其它两个，所以依据这种设计思想能构造良好的松耦合的构件。
 缺点 不适合小型，中等规模的应用程序：  花费大量时间将MVC应用到规模并不是很大的应用程序通常会得不偿失。  增加系统结构和实现的复杂性：  对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。  视图与控制器间的过于紧密的连接：  视图与控制器是相互分离，但却是联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。  视图对模型数据的低效率访问：  依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。   例子 最典型的MVC就是JavaEE规范的JSP（M） + servlet（C） + javabean（M）的模式：
  JSP+JavaBean （最早的JavaEE架构）——&amp;gt; JSP + servlet + javabean</description>
    </item>
    
    <item>
      <title>Git命令远端</title>
      <link>https://onlythepiano.github.io/post/git%E5%91%BD%E4%BB%A4%E8%BF%9C%E7%AB%AF/</link>
      <pubDate>Tue, 03 Dec 2019 21:50:03 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/git%E5%91%BD%E4%BB%A4%E8%BF%9C%E7%AB%AF/</guid>
      <description>命令顺序：git remote -&amp;gt; git branch -&amp;gt; git push
 Part-1:git remote 查看关联的远程仓库信息 #查看关联的远程仓库的名称 git remote # #查看关联的远程仓库的详细信息 git remote -v   通过 git clone 下载项目到本地时，项目文件夹中的 .git 目录就是版本库目录。.git 目录中的 config 文件中有远程仓库的关联配置。
  新的；git init 命令初始化一个新本地仓库，它在工作目录下生成一个名为.git的隐藏文件夹；但是没有和远程仓库关联
  添加远程仓库的关联 远程仓库的名称一般默认为 origin ，当然，你可以设置为其他的名称。
# &amp;lt;url&amp;gt;远程仓库的 url，可采用 http 协议或 ssh（git） 协议 git remote add origin &amp;lt;url&amp;gt; 删除远程仓库的关联 git remote remove &amp;lt;name&amp;gt; # 修改远程仓库的关联 比如，之前你关联的远程仓库使用的协议是 http ，你想将关联的远程仓库的 url 改为 ssh 协议的。
修改关联的远程仓库的方法，主要有三种：
第一种：使用 git remote set-url 命令，更新远程仓库的 url git remote set-url origin &amp;lt;newurl&amp;gt; # 第二种：先删除之前关联的远程仓库，再来添加新的远程仓库关联 #删除关联的远程仓库 git remote remove &amp;lt;name&amp;gt; # #添加新的远程仓库关联 git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt; 远程仓库的名称推荐使用默认的名称 origin 。</description>
    </item>
    
    <item>
      <title>Git命令撤销和删除</title>
      <link>https://onlythepiano.github.io/post/git%E5%91%BD%E4%BB%A4%E6%92%A4%E9%94%80%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <pubDate>Tue, 03 Dec 2019 21:46:25 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/git%E5%91%BD%E4%BB%A4%E6%92%A4%E9%94%80%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <description>https://github.com/OnlyThePiano/onlythepiano.github.io.git
https://onlythepiano.github.io/
 Part-1:理解工作区与暂存区的区别？   工作区：就是你在电脑上看到的目录，比如目录下testGit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
  版本库(Repository)：工作区有一个隐藏目录” .git “，这个不属于工作区，这是版本库；其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
    什么是版本库？ ​	版本库又名仓库，英文名repository；你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
我们前面说过使用Git提交文件到版本库有两步：
  是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。   使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。    Part-2:Git撤销修改和删除文件操作 目标 对文件的操作最多的肯定是撤回和查看，撤回和查看，撤回和查看
一、撤销修改 ​	比如我现在在readme.txt文件里面增加了内容，但是我只是写了没提交（git add 没有）；在我未提交之前，如果我需要马上恢复以前的版本；现在我可以有如下几种方法可以做修改：
  手动修改：去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
  git reset命令：我可以按以前的方法直接恢复到上一个版本；如下：
  git reset --hard HEAD^ # 主要是git checkout命令撤销 1）查看下当前的状态： git status #非常常用的命令 之后可以发现，Git会告诉你，git checkout &amp;ndash; file 可以丢弃工作区的修改；
2）执行撤回命令：
git checkout -- readme.</description>
    </item>
    
    <item>
      <title>Git命令分支合并</title>
      <link>https://onlythepiano.github.io/post/git%E5%91%BD%E4%BB%A4%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/</link>
      <pubDate>Tue, 03 Dec 2019 21:26:09 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/git%E5%91%BD%E4%BB%A4%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/</guid>
      <description>Part-1:git merge 目标 这是一个贯穿整个GIt的分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
一、创建与合并分支 在 版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
1）建立新的分支工作：(这里dev是我测试用的目标分支) #建立并切换到该分支 git checkout -b dev #相当于两条指令 git branch dev git checkout dev 2）切换到主分支后合并创建的分支： git checkout master # git merge dev git merge命令用于合并指定分支到当前分支上；合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
3）删除分支： 合并完成后的下一步，我们要接着删除dev分支了
git branch -d dev # 二、总结创建与合并分支命令如下： 查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout –b name 合并某分支到当前分支：git merge name 删除分支：git branch –d name  Part-2:如何解决冲突？ 目标 以上是要合并的主分支没有修改的情况下，合并时不会发生冲突；但是大多数时候，团体协作时主分支master不可能一直不变，它不是一个增量过程，它是一个敏捷过程；你在开发修改，别人也是在开发修改。
假设都是提交合并到同一个master分支时，于是当别人提交到远端比你早的时候，就相当于你的本地相对应的master主分支发生了改变，所以合并其他分支时就会发生冲突.
1）合并分支： git checkout master # git merge test # 2）查看合并文件，手动解决冲突 （Git用&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt;，=======，&amp;raquo;&amp;raquo;&amp;raquo;&amp;gt;标记出不同分支的内容）：</description>
    </item>
    
    <item>
      <title>E-R图</title>
      <link>https://onlythepiano.github.io/post/e-r%E5%9B%BE/</link>
      <pubDate>Mon, 02 Dec 2019 21:39:36 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/post/e-r%E5%9B%BE/</guid>
      <description>用户：   用户可以对已完成订单发表评论；
  用户可以搜索想买的商品，想要预定的酒店和交通工具等；
  用户可以有多个订单，每个订单对应于一个收货地址；
  商品类型包括酒店、机票、车票、旅游景点；
  用户拥有添加多个地址信息作为收货地址；
  用户还可以收藏自己喜欢的酒店、景点；
  每个用户购买的商品还能有服务；
  一个订单可以有多个商品；
  每个用户只有一个登陆账号和注册一个登陆账号；每个账号可以绑定多个外联账号；
  一个管理员可以管理多个用户，一个用户可以由多个管理员管理
   N:M：管理员和用户、订单和商品、商品和收藏夹
1：N：用户和订单
1：1：用户和收藏夹
实体 用户、订单、商品、（商品类型）、收藏夹、管理员 商品的商品类型与其他实体有联系吗？与用户、订单等全都没关系，所以商品类型为商品的属性 实体的关系模式： 用户（用户编号、用户名、密码、性别、邮箱）
订单（订单编号、用户编号、下单时间、订单状态、商品数量）
商品（商品编号、商品名称、商品价格、商品数量、商品类型）
收藏夹（收藏夹编号、用户编号、商品编号、商品名称）
管理员（管理员编号、管理员名称、电话）
联系的关系模式： 管理（用户编号、管理员编号）
包含（订单编号、商品编号、订单数量）
存放（商品编号、收藏夹编号、存放量）
ER图 </description>
    </item>
    
  </channel>
</rss>