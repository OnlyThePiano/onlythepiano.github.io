<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Cocloa is looking at the Piano</title>
    <link>https://onlythepiano.github.io/categories/git/</link>
    <description>Recent content in Git on Cocloa is looking at the Piano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2019 00:22:21 +0800</lastBuildDate>
    
	<atom:link href="https://onlythepiano.github.io/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hosts</title>
      <link>https://onlythepiano.github.io/hosts/</link>
      <pubDate>Mon, 16 Dec 2019 00:22:21 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/hosts/</guid>
      <description>目的 #不是注释吗？为什么要加上？ Bash 不加注释#： 192.30.253.113 github.com 199.232.5.194 github.global.ssl.fastly.net 79949@Cocola MINGW64 ~/Desktop/新建文件夹 (2) (master) $ git clone https://github.com/hlk-1135/squirrel.git Cloning into &#39;squirrel&#39;... remote: Enumerating objects: 751, done. Receiving objects: 86% (647/751), 25.33 MiB | 91.00 KiB/s 空白： 79949@Cocola MINGW64 ~/Desktop/新建文件夹 (2) (master) $ git clone https://github.com/hlk-1135/squirrel.git Cloning into &#39;squirrel&#39;... remote: Enumerating objects: 751, done. Receiving objects: 47% (358/751), 2.36 MiB | 78.00 KiB/s Cmd 不加注释#： 151.101.185.194 github.global-ssl.fastly.net 192.30.253.112 github.com 79949@Cocola MINGW64 ~/Desktop/新建文件夹 (2) (master) $ git clone https://github.com/hlk-1135/squirrel.git Cloning into &#39;squirrel&#39;... remote: Enumerating objects:</description>
    </item>
    
    <item>
      <title>Gitclone加速</title>
      <link>https://onlythepiano.github.io/gitclone%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Sun, 15 Dec 2019 22:16:07 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/gitclone%E5%8A%A0%E9%80%9F/</guid>
      <description>目的 git clone特别慢是因为github.global.ssl.fastly.net域名被限制了； 当我们访问域名首先要获取对应的ip，域名解析器要解析出对应的ip，然后我们才能访问到，如果域名解析器解析错了，或解析慢，当我们访问某些域名的时候就会很慢才能访问到； 只要找到这个域名对应的ip地址，然后在</description>
    </item>
    
    <item>
      <title>解决冲突 远端部署</title>
      <link>https://onlythepiano.github.io/%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81-%E8%BF%9C%E7%AB%AF%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 05 Dec 2019 17:05:44 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81-%E8%BF%9C%E7%AB%AF%E9%83%A8%E7%BD%B2/</guid>
      <description>目标 前面《Git命令分支》介绍了本地分支合并冲突发生后可以手动解决，但是对于《冲突-部署远端》发生的冲突，又应该怎么解决呢？ 其实本地分支push到远端发生时的冲突，也是因为分支合并而产生的冲突；就是将本地分支和远端分支合并，合并那就是要手动解决 git pull git pull &amp;ndash;rebase 在使用git的过程中经常需要使用到git pul</description>
    </item>
    
    <item>
      <title>冲突-远端部署</title>
      <link>https://onlythepiano.github.io/%E5%86%B2%E7%AA%81-%E8%BF%9C%E7%AB%AF%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 05 Dec 2019 13:25:00 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E5%86%B2%E7%AA%81-%E8%BF%9C%E7%AB%AF%E9%83%A8%E7%BD%B2/</guid>
      <description>目标 新建一个没有的Blog.md是可以很顺利的push到远端的，因为这个文件：远端和本地没有冲突；对于部署到远端，是什么时候才会发生冲突呢？ 冲突发生的时间： 在本地分支合并时，如果master主分支发生了改变，子分支dev是不能合并到master的，会发生冲突； 那对于远端的情况是怎么样的呢？ 命令： git add</description>
    </item>
    
    <item>
      <title>Git分支</title>
      <link>https://onlythepiano.github.io/git%E5%88%86%E6%94%AF/</link>
      <pubDate>Thu, 05 Dec 2019 11:34:24 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/git%E5%88%86%E6%94%AF/</guid>
      <description>github上有分支master、dev： 在本地： git checkout -b dev 新建并且切换到本地dev分支 git pull origin dev 本地分支和远端分支dev相关联 或 git branch -u origin/dev 本地分支和远端分支dev相关联 github上没有dev分支： git push origin : git push origin dev:dev #或 git push origin dev #相当于默认建立与本地同名</description>
    </item>
    
    <item>
      <title>Git命令远端</title>
      <link>https://onlythepiano.github.io/git%E5%91%BD%E4%BB%A4%E8%BF%9C%E7%AB%AF/</link>
      <pubDate>Tue, 03 Dec 2019 21:50:03 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/git%E5%91%BD%E4%BB%A4%E8%BF%9C%E7%AB%AF/</guid>
      <description>命令顺序：git remote -&amp;gt; git branch -&amp;gt; git push Part-1:git remote 查看关联的远程仓库信息 #查看关联的远程仓库的名称 git remote # #查看关联的远程仓库的详细信息 git remote -v 通过 git clone 下载项目到本地时，项目文件夹中的 .git 目录就是版本库目录。.git 目录中的 config 文件中有远程仓库的关联配置。 新的；git init 命令初始化一个新本地仓库，它在工作目录下生成一个名为.</description>
    </item>
    
    <item>
      <title>Git命令撤销和删除</title>
      <link>https://onlythepiano.github.io/git%E5%91%BD%E4%BB%A4%E6%92%A4%E9%94%80%E5%92%8C%E5%88%A0%E9%99%A4/</link>
      <pubDate>Tue, 03 Dec 2019 21:46:25 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/git%E5%91%BD%E4%BB%A4%E6%92%A4%E9%94%80%E5%92%8C%E5%88%A0%E9%99%A4/</guid>
      <description>https://github.com/OnlyThePiano/onlythepiano.github.io.git https://onlythepiano.github.io/ Part-1:理解工作区与暂存区的区别？ 工作区：就是你在电脑上看到的目录，比如目录下testGit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。 版本库(Repository)：工作区有一个隐藏目录” .git “，这个不属于工作区，这是版本库；其中版本库里面存了</description>
    </item>
    
    <item>
      <title>Git命令分支合并</title>
      <link>https://onlythepiano.github.io/git%E5%91%BD%E4%BB%A4%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/</link>
      <pubDate>Tue, 03 Dec 2019 21:26:09 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/git%E5%91%BD%E4%BB%A4%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/</guid>
      <description>Part-1:git merge 目标 这是一个贯穿整个GIt的分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。 一、创建与合并分支 在 版本回填退里，你已经知道，</description>
    </item>
    
  </channel>
</rss>