<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Cocloa is looking at the Piano</title>
    <link>https://onlythepiano.github.io/categories/java/</link>
    <description>Recent content in Java on Cocloa is looking at the Piano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jul 2020 21:47:29 +0800</lastBuildDate>
    
	<atom:link href="https://onlythepiano.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java基础类库-Class类</title>
      <link>https://onlythepiano.github.io/java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93-class%E7%B1%BB/</link>
      <pubDate>Sat, 11 Jul 2020 21:47:29 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93-class%E7%B1%BB/</guid>
      <description>Class 类 Java程序在运行时，Java运行时系统一直对所有的对象进行所谓的运行时类型标识，即所谓的RTTI。 这项信息纪录了每个对象所属的类。虚拟机通常使用运行时类型信息选准正确方法去执行，用来保存这些类型信息的类是Class类。Class类封装一个对象和接口运行时的状态，当装载类时，Class类型的对象</description>
    </item>
    
    <item>
      <title>序列化</title>
      <link>https://onlythepiano.github.io/%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Fri, 10 Jul 2020 13:30:32 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>原文链接：https://blog.csdn.net/so_geili/article/details/99836043 一、为什么需要序列化 ? java进程运行时会把相关的类生成一堆实例，并放入堆栈空间中，如果进程执行结束，那么内存中的实例对象就会被 gc 回收。如果想在新的程序中使用之前那个对象，应该怎么</description>
    </item>
    
    <item>
      <title>Java集合-Set、List、Map</title>
      <link>https://onlythepiano.github.io/java%E9%9B%86%E5%90%88-setlistmap/</link>
      <pubDate>Thu, 09 Jul 2020 21:53:41 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E9%9B%86%E5%90%88-setlistmap/</guid>
      <description>Java集合-Set、List、Map - List、Set、Map 的区别： List(对付顺序的好帮手)： 存储的元素是有序的、可重复的。 Set(注重独一无二的性质): 存储的元素是无序的、不可重复的。 Map(用 Key 来搜索的专家): 使用键值对（kye-value）存储，类似于数学上 (x,y)，Key 是无序的、</description>
    </item>
    
    <item>
      <title>Java集合</title>
      <link>https://onlythepiano.github.io/java%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 09 Jul 2020 20:42:38 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E9%9B%86%E5%90%88/</guid>
      <description>Java 集合 为了保存数量不确定的数据，以及保存具有映射关系的数据(也被称为关联数组)，Java 提供了集合类。 集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。所有的集合类都位于 java.util 包下。 集合类和数组不一样，数组元素既可以是基本类型的值，也可以是对象(实际上保存的是对象的引用变量)；而集合里只能保存</description>
    </item>
    
    <item>
      <title>Java基础类库-String类</title>
      <link>https://onlythepiano.github.io/java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93-string%E7%B1%BB/</link>
      <pubDate>Thu, 09 Jul 2020 15:08:01 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93-string%E7%B1%BB/</guid>
      <description>String、StringBuffer 和 StringBuilder 类 字符串类 字符串就是一连串的字符序列，Java 提供了String 和StringBuffer 两个类来封装字符串，并提供了一系列方法来操作字符串对象。 String 类： String 类是不可变类，即一旦一个 String 对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。 StringBuffer</description>
    </item>
    
    <item>
      <title>Java子类父类转换</title>
      <link>https://onlythepiano.github.io/java%E5%AD%90%E7%B1%BB%E7%88%B6%E7%B1%BB%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Thu, 09 Jul 2020 11:29:49 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%AD%90%E7%B1%BB%E7%88%B6%E7%B1%BB%E8%BD%AC%E6%8D%A2/</guid>
      <description>java 子类父类转换 子类转父类 因为子类其实是一种特殊的父类， 因此 Java 允许把一个子类对象直接赋给一个父类引用变量， 无须任何类型转换，或者被称为向上转型(upcasting)， 向上转型由系统自动完成。这也是Java中的多态的实现机制。 java 中子类强转父类，实际上依然是子类； 该引用只能调用父类中定义的方法和变量； 如果</description>
    </item>
    
    <item>
      <title>Java基础类库-Object类</title>
      <link>https://onlythepiano.github.io/java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93-object%E7%B1%BB/</link>
      <pubDate>Wed, 08 Jul 2020 15:44:26 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93-object%E7%B1%BB/</guid>
      <description>Java 基础类库-Object类 Object 类是 java 默认的提供的一个类，Object 类是所有类的父类，也就是说任何一个类的定义的时候如果没有明确的继承一个父类的话，那么它就是 Object 的子类。 - 常用方法： Class &amp;lt;?&amp;gt; getClass() 方法 返回该对象的运行时类；final 方法，返回 Class 类型的对象，反射来获取对象。 String toString() 方法 一般子类都有覆盖，目的在于获取对</description>
    </item>
    
    <item>
      <title>泛型</title>
      <link>https://onlythepiano.github.io/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Tue, 07 Jul 2020 22:51:03 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型 所谓泛型，就是允许在定义类、接口、方法时使用类型形参，这个类型形参将在声明变量、创建对 象、调用方法时动态地指定( 即传入实际的类型参数，也可称为类型实参)。Java 5改写了集合框架中 的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类 型实参，这就是在前面程序中</description>
    </item>
    
    <item>
      <title>Java并发-进程线程2</title>
      <link>https://onlythepiano.github.io/java%E5%B9%B6%E5%8F%91-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B2/</link>
      <pubDate>Fri, 03 Jul 2020 09:56:08 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%B9%B6%E5%8F%91-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B2/</guid>
      <description>进程线程2 共享和私有资源 - 线程共享： Java 堆 方法区 - 线程私有： 程序计数器 虚拟机栈 本地方法栈 - 程序计数器为什么私有 ？ 程序计数器的作用就是记录当前线程执行的位置，当线程再次被切换回来时能够知道上次执行到哪里了； 所以是为了线程切换后能恢复到正确位置上； - 两栈为什么私有呢 ？ 每个Java方法在执行的同时会创建一 个</description>
    </item>
    
    <item>
      <title>垃圾收集器和内存分配策略</title>
      <link>https://onlythepiano.github.io/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</link>
      <pubDate>Thu, 02 Jul 2020 21:34:01 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%92%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</guid>
      <description>垃圾收集器和内存分配策略 Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。 垃圾收集（Garbage Collection）需考虑的 3 件事情： 哪些内存需要回收？ 什么时候回收呢？ 如何回收？ GC 关注的内存 程序计数器、虚拟机栈、本地方法栈3个区域随线程</description>
    </item>
    
    <item>
      <title>String类和常量池</title>
      <link>https://onlythepiano.github.io/string%E7%B1%BB%E5%92%8C%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <pubDate>Thu, 02 Jul 2020 20:29:09 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/string%E7%B1%BB%E5%92%8C%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <description>String s1 = new String(&amp;ldquo;abc&amp;rdquo;); 这句话创建了几个字符串对象？ 将创建 1 或 2 个字符串。 如果池中已存在字符串常量 “abc”，则只会在堆空间创建一个字符串常量 “abc”。如果池中没有字符串常量 “abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。 原文链接：https://github.com/Sn</description>
    </item>
    
    <item>
      <title>Java内存区域与内存溢出异常</title>
      <link>https://onlythepiano.github.io/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Thu, 02 Jul 2020 19:54:04 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</guid>
      <description>Java内层区域与内存溢出异常 对于 Java 程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个 new 操作去写配对的 delete/free 代码，不容易出现内存泄漏和内存溢出问题，由虚拟机管理内存。这一切看起来都很美好。 不过，也正是因为 Java 程序员把内存控制的权力交给了 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟</description>
    </item>
    
    <item>
      <title>Java输入输出</title>
      <link>https://onlythepiano.github.io/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 22 Jun 2020 10:58:57 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>Java 输入输出 File类 File 类是 java.io 包下代表与平台无关的文件和目录，也就是说,如果希望在程序中操作文件和目录，都可以通过File类来完成。 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。 1.访问文件和目录 - 访问文件名相关的方法： String getName(): 返回此File对象所表示的文件名或路径名( 如果是路</description>
    </item>
    
    <item>
      <title>6号杯</title>
      <link>https://onlythepiano.github.io/6%E5%8F%B7%E6%9D%AF/</link>
      <pubDate>Mon, 22 Jun 2020 08:21:50 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/6%E5%8F%B7%E6%9D%AF/</guid>
      <description>惊！ NULL 广告：作文征集 明天有素材？后天有素材？期待你们的分享😄 联系方式：QQ“绿色健康小清新” 目的 每次 git 上传博客到 github pages 时都要一一修改图片的地址，很麻烦了。 图片地址修改 利用 Java File 类对文件读取和写入和 String 类的 replaceAll() 方法替换。 输入输出都是文本内容，所以使用字符流。 BufferedReader.readLine() 方法，可以一次读入一行的内容，方便读取输入流文本内</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://onlythepiano.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 22 Jun 2020 00:16:42 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式 正则表达式是一个强大的字符串处理工具,可以对字符串进行查找、提取、分割、替换等操作。 - String 类提供的有关正则的方法： boolean matches(String regex)：判断该字符串是否匹配指定的正则表达式。 String replaceAll(String regex, String replacement)：将该字符串中所有匹配regex的子串替换成 replacement。 String replaceFirst(String regex, String replace</description>
    </item>
    
    <item>
      <title>Java并发-进程线程</title>
      <link>https://onlythepiano.github.io/java%E5%B9%B6%E5%8F%91-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 08 Jun 2020 09:10:34 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%B9%B6%E5%8F%91-%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</guid>
      <description>惊！ LUCK，cherish every pay! 广告：作文征集 明天有素材？后天有素材？期待你们的分享😄 联系方式：QQ“绿色健康小清新” 目标 怎么还能混淆进程和线程的呢？ 进程和线程 引入进程：使得多个程序并发执行，改善资源利用率和提高系统效率。 进程之后引入了线程：为了减少程序并行时候所付出的时空开销，使得并发现更好。 解决</description>
    </item>
    
    <item>
      <title>Mavan构建工具</title>
      <link>https://onlythepiano.github.io/mavan%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 20 Dec 2019 22:43:51 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mavan%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</guid>
      <description>目的 介绍构建工具make、Maven等之前，先介绍编程不可少的IDE，即集成开发环境；但是为什么基本上主流的IDE都是要集成构建工具呢？ IDE例子： 一般包括：编辑器+编译器+调试器（editor+compiler+debugger） 为什么会有构建工具？ 编译步骤一般包括：预处理、编译、汇编、链接；如果</description>
    </item>
    
    <item>
      <title>MVC框架</title>
      <link>https://onlythepiano.github.io/mvc%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 04 Dec 2019 10:57:47 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mvc%E6%A1%86%E6%9E%B6/</guid>
      <description>MVC 框架 Model View Controller：模型(model)－视图(view)－控制器(controller) Model（模型）： 是应用程序中用于处理应用程序数据逻辑的部分。 通常模型对象负责在数据库中存取数据。 View（视图）： 是应用程序中处理数据显示的部分。 通常视图是依据模型数据创建的。 Controller</description>
    </item>
    
  </channel>
</rss>