<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Cocloa is looking at the Piano</title>
    <link>https://onlythepiano.github.io/categories/java/</link>
    <description>Recent content in Java on Cocloa is looking at the Piano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jul 2020 20:29:09 +0800</lastBuildDate>
    
	<atom:link href="https://onlythepiano.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>String类和常量池</title>
      <link>https://onlythepiano.github.io/string%E7%B1%BB%E5%92%8C%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <pubDate>Thu, 02 Jul 2020 20:29:09 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/string%E7%B1%BB%E5%92%8C%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <description>String s1 = new String(&amp;ldquo;abc&amp;rdquo;); 这句话创建了几个字符串对象？ 将创建 1 或 2 个字符串。 如果池中已存在字符串常量 “abc”，则只会在堆空间创建一个字符串常量 “abc”。如果池中没有字符串常量 “abc”，那么它将首先在池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。 原文链接：https://github.com/Sn</description>
    </item>
    
    <item>
      <title>Java内存区域与内存溢出异常</title>
      <link>https://onlythepiano.github.io/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Thu, 02 Jul 2020 19:54:04 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</guid>
      <description>Java内层区域与内存溢出异常 对于 Java 程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个 new 操作去写配对的 delete/free 代码，不容易出现内存泄漏和内存溢出问题，由虚拟机管理内存。这一切看起来都很美好。 不过，也正是因为 Java 程序员把内存控制的权力交给了 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟</description>
    </item>
    
    <item>
      <title>Java输入输出</title>
      <link>https://onlythepiano.github.io/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 22 Jun 2020 10:58:57 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>Java 输入输出 File类 File 类是 java.io 包下代表与平台无关的文件和目录，也就是说,如果希望在程序中操作文件和目录，都可以通过File类来完成。 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。 1.访问文件和目录 - 访问文件名相关的方法： String getName(): 返回此File对象所表示的文件名或路径名( 如果是路</description>
    </item>
    
    <item>
      <title>6号杯</title>
      <link>https://onlythepiano.github.io/6%E5%8F%B7%E6%9D%AF/</link>
      <pubDate>Mon, 22 Jun 2020 08:21:50 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/6%E5%8F%B7%E6%9D%AF/</guid>
      <description>惊！ NULL 广告：作文征集 明天有素材？后天有素材？期待你们的分享😄 联系方式：QQ“绿色健康小清新” 目的 每次 git 上传博客到 github pages 时都要一一修改图片的地址，很麻烦了。 图片地址修改 利用 Java File 类对文件读取和写入和 String 类的 replaceAll() 方法替换。 输入输出都是文本内容，所以使用字符流。 BufferedReader.readLine() 方法，可以一次读入一行的内容，方便读取输入流文本内</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://onlythepiano.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 22 Jun 2020 00:16:42 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式 正则表达式是一个强大的字符串处理工具,可以对字符串进行查找、提取、分割、替换等操作。 - String 类提供的有关正则的方法： boolean matches(String regex)：判断该字符串是否匹配指定的正则表达式。 String replaceAll(String regex, String replacement)：将该字符串中所有匹配regex的子串替换成 replacement。 String replaceFirst(String regex, String replace</description>
    </item>
    
    <item>
      <title>5号杯</title>
      <link>https://onlythepiano.github.io/5%E5%8F%B7%E6%9D%AF/</link>
      <pubDate>Mon, 08 Jun 2020 09:10:34 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/5%E5%8F%B7%E6%9D%AF/</guid>
      <description>惊！ LUCK，cherish every pay! 广告：作文征集 明天有素材？后天有素材？期待你们的分享😄 联系方式：QQ“绿色健康小清新” 目标 怎么还能混淆进程和线程的呢？ 进程和线程 引入进程：使得多个程序并发执行，改善资源利用率和提高系统效率。 进程之后引入了线程：为了减少程序并行时候所付出的时空开销，使得并发现更好。 解决</description>
    </item>
    
    <item>
      <title>Mavan构建工具</title>
      <link>https://onlythepiano.github.io/mavan%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 20 Dec 2019 22:43:51 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mavan%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</guid>
      <description>目的 介绍构建工具make、Maven等之前，先介绍编程不可少的IDE，即集成开发环境；但是为什么基本上主流的IDE都是要集成构建工具呢？ IDE例子： 一般包括：编辑器+编译器+调试器（editor+compiler+debugger） 为什么会有构建工具？ 编译步骤一般包括：预处理、编译、汇编、链接；如果</description>
    </item>
    
    <item>
      <title>MVC框架</title>
      <link>https://onlythepiano.github.io/mvc%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 04 Dec 2019 10:57:47 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mvc%E6%A1%86%E6%9E%B6/</guid>
      <description>MVC 框架 Model View Controller：模型(model)－视图(view)－控制器(controller) Model（模型）： 是应用程序中用于处理应用程序数据逻辑的部分。 通常模型对象负责在数据库中存取数据。 View（视图）： 是应用程序中处理数据显示的部分。 通常视图是依据模型数据创建的。 Controller</description>
    </item>
    
  </channel>
</rss>