<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Cocloa is looking at the Piano</title>
    <link>https://onlythepiano.github.io/categories/mysql/</link>
    <description>Recent content in MySQL on Cocloa is looking at the Piano</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Jun 2020 20:51:42 +0800</lastBuildDate>
    
	<atom:link href="https://onlythepiano.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>复制</title>
      <link>https://onlythepiano.github.io/%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 22 Jun 2020 20:51:42 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E5%A4%8D%E5%88%B6/</guid>
      <description>C 打扰了</description>
    </item>
    
    <item>
      <title>MySQL-应用层优化</title>
      <link>https://onlythepiano.github.io/mysql-%E5%BA%94%E7%94%A8%E5%B1%82%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 22 Jun 2020 14:29:25 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mysql-%E5%BA%94%E7%94%A8%E5%B1%82%E4%BC%98%E5%8C%96/</guid>
      <description>应用层优化 我们在应用中反复看到一些相同的问题，经常是因为人们使用了觖乏设计的现成系统或者简单开发的流行框架。虽然有时候可以通过这些框架更快更简单地构建系统，但是如果不清楚这些框架背后做了什么操作，反而会增加系统的风险。 - 常见问题： 什么东西再消耗每台主机的CUP、磁盘、网络和内存资源呢？ 应用真的需要获</description>
    </item>
    
    <item>
      <title>MySQL-高级特性</title>
      <link>https://onlythepiano.github.io/mysql-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 22 Jun 2020 13:39:37 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mysql-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
      <description>MySQL 高级特性 首先，查询是如何执行的？ 客户端发送一条查询给服务器。 服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。 服务器端进行SQL解析、预处理，再由优化器生成对应的执行计。 MySQL 根据优化器生成的执行计划，调用存储引擎的API来执行查询。 将结果返回给客户端。 查询缓存 MySQL 查</description>
    </item>
    
    <item>
      <title>MySQL-查询性能优化</title>
      <link>https://onlythepiano.github.io/mysql-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 22 Jun 2020 13:38:03 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mysql-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>查询性能优化 重要是响应时间。 如果把查询看作是一个任务，那么它由一系列子任务组成，每个子任务都会消耗-一定的时间。如果要优化查询，实际上要优化其子任务，要么消除其中一些子任务，要么减少子任务的执行次数，要么让子任务执行时间更快。 查询的生命周期大致可以按照顺序来看:从客户端，到服务器，然后在服务器.上进</description>
    </item>
    
    <item>
      <title>分表和分区</title>
      <link>https://onlythepiano.github.io/%E5%88%86%E8%A1%A8%E5%92%8C%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 21 Jun 2020 09:55:30 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E5%88%86%E8%A1%A8%E5%92%8C%E5%88%86%E5%8C%BA/</guid>
      <description>分 因为分库、分表可以将大表切分成多个片段，每次检索时可以只检索一小个片段，且因为这些片段可以分开存放在不同存储设备、不同数据库服务器上，它的整体性能得到了很大的提高。 原文链接：https://www.cnblogs.com/f-ck-need-u/p/9388407.html 业务分库 业务分库：按业务</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>https://onlythepiano.github.io/%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sun, 21 Jun 2020 08:09:01 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E7%B4%A2%E5%BC%95/</guid>
      <description>背景知识 - 数据库的性能问题 磁盘IO性能非常低，严重的影响数据库系统的性能。 磁盘顺序读写比随机读写的性能高很多。 - 数据的基本存储结构 磁盘空间被划分为许多大小相同的块（Block）或者页(Page). 一个表的这些数据块以链表的方式串联在一起。 数据是以行（Row）为单位一行一行的存放在磁盘上的块中,如图所</description>
    </item>
    
    <item>
      <title>数据查询</title>
      <link>https://onlythepiano.github.io/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sat, 20 Jun 2020 17:33:05 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2/</guid>
      <description>数据查询 学生表：Student(Sno, Sname, Ssex, Sage, Sdept) 课程表：Course(Cno, Cname, Cpno, Ccredit) 学生选课表：SC(Sno, Cno, Grade) Sdept：院系、Cpno：先修课、Ccredit：学分 单表查询 1.选择表中若干列 查询指定列：SELECT Sno, Sname FROM Student; 查询全部列：SELECT * FROM Student; 查询经过计算的值：SELECT Sname, 2014-Sage FROM Student; se</description>
    </item>
    
    <item>
      <title>MySQL-数据类型</title>
      <link>https://onlythepiano.github.io/mysql-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 20 Jun 2020 17:28:04 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/mysql-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>数据类型 更小的通常更好 占用更少磁盘、内存和CPU缓存 简单更好 操作时需要更少的CPU周期 避免NULL 可为NULL的列使得索引、索引统计和值比较都更复杂。可为NULL的列会使用更多的存储空间，在MySQL里也需要特殊处理 整数类型 TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。 整数计算一般</description>
    </item>
    
    <item>
      <title>B树</title>
      <link>https://onlythepiano.github.io/b%E6%A0%91/</link>
      <pubDate>Sat, 13 Jun 2020 10:26:33 +0800</pubDate>
      
      <guid>https://onlythepiano.github.io/b%E6%A0%91/</guid>
      <description>目的 二叉树，虽然查找查找速度非常快，比较次数也少；但是并不适合于存储设备，B树是为了存储设备或者磁盘而设计的一种平衡查找树。 在大数据存储过程，大量的数据会存储到外存磁盘，外存磁盘中读取与写入某数据的时候，首先定位到磁盘中的某一块；为了减少读写次数，B 树是一颗多叉树，成功降低了树得深度。 B- 树 动态查找树</description>
    </item>
    
  </channel>
</rss>